{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>ndfc-python contains Python classes and example scripts for interacting with Cisco's Nexus Dashboard Fabric Controller (NDFC) via its REST API.</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#description","title":"Description","text":"<p>ndfc-python contains Python classes and example scripts for interacting with Cisco's Nexus Dashboard Fabric Controller (NDFC) via its REST API.</p>"},{"location":"scripts/","title":"Scripts","text":""},{"location":"scripts/#examplesdevice_infopy","title":"examples/device_info.py","text":""},{"location":"scripts/#description","title":"Description","text":"<p>Returns switch information.</p>"},{"location":"scripts/#usage","title":"Usage","text":"<pre><code>./device_info.py --config config_device_info.yaml\n</code></pre>"},{"location":"scripts/#example-config-file","title":"Example Config File","text":"<pre><code>---\nconfig:\n  switch_ip4: 10.1.1.1\n  fabric_name: MyFabric\n</code></pre>"},{"location":"classes/","title":"Classes","text":"<p><code>*</code> indicates that a class has not yet been updated to work with RestSend().</p> Library Description Log Create the base ndfc_python logging object NdfcCredentials Read the caller's Ansible Vault and provides the credentials therein to the other libraries NdfcDeviceInfo <code>*</code> Retrieve information about a switch NdfcDiscover Discover device NdfcPolicy <code>*</code> Create / delete policies NdfcPythonConfig Returns the contents of a YAML file as a dictionary, given a path to the file NdfcPythonLogger Configure logging for <code>ndfc-python</code> scripts NdfcPythonSender Instantiate and configure the Sender() class NdfcReachability <code>*</code> Test switch reachability (from NDFC controller perspective). NetworkCreate Create networks NetworkDelete Delete networks VrfCreate Create VRFs Validations Validation methods used by the other classes (deprecated) YamlReader Read a YAML file and return its contents as a python dict"},{"location":"setup/clone-the-repositories/","title":"Clone the repositories","text":"<p>We'll need to clone two repositories. - ndfc-python - ansible-dcnm</p> <p>It's recommended to clone the repositories side-by-side in the directory where you keep your repositories.  We'll use <code>$HOME/repos</code> in our examples.</p>"},{"location":"setup/clone-the-repositories/#ndfc-python","title":"<code>ndfc-python</code>","text":"<pre><code>cd $HOME/repos\ngit clone https://github.com/allenrobel/ndfc-python.git\n</code></pre>"},{"location":"setup/clone-the-repositories/#ansible-dcnm","title":"<code>ansible-dcnm</code>","text":"<pre><code>cd $HOME/repos\ngit clone https://github.com/CiscoDevNet/ansible-dcnm.git\n</code></pre> <p>Until relative-imports are integrated into the <code>ansible-dcnm</code> repository, you'll need to switch branches.</p> <pre><code>cd $HOME/repos/ansible-dcnm\ngit switch relative-imports\n</code></pre>"},{"location":"setup/enable-logging/","title":"Enable logging","text":"<p>If you want to enable script logging (optional), set the following environment variable.</p> <pre><code>export NDFC_LOGGING_CONFIG=$HOME/repos/ndfc-python/lib/ndfc_python/logging_config.json\n</code></pre> <p>This is a standard Pyton logging configuration file.  There is an example file in this repository at <code>lib/ndfc_python/logging_config.json</code></p>"},{"location":"setup/running-the-example-scripts/","title":"Running the example scripts","text":"<pre><code>export PYTHONPATH=${PYTHONPATH}:/path/to/this/repo/ndfc-python/lib\n# optional - for Ansible Vault\n# export NDFC_PYTHON_CONFIG=/path/to/ndfc-python-settings.yaml\n# optional - to enable logging\n# export NDFC_LOGGING_CONFIG=/path/to/ndfc-python-logging-config.json\n\npy311) ~ % cd $HOME/ndfc-python/examples\n(py311) examples % ./device_info.py --config config_device_info.yaml\n</code></pre>"},{"location":"setup/update-your-pythonpath/","title":"Update your PYTHONPATH","text":"<p>Update your PYTHONPATH to include both <code>ndfc-python</code> and <code>ansible-dcnm</code> repositories.</p> <pre><code>export PYTHONPATH=$PYTHONPATH:$HOME/repos/ndfc-python:$HOME/repos/ansible-dcnm\n</code></pre> <p>With the above in place, imports from the repository will look like the following in your scripts.</p> <pre><code>from plugins.module_utils.common.rest_send import RestSend\nfrom plugins.module_utils.common.sender_requests import Sender\n</code></pre>"},{"location":"setup/using-ansible-vault/","title":"Using Ansible Vault","text":"<p>ndfc-python can be modified to work with Ansible Vault, per below.</p>"},{"location":"setup/using-ansible-vault/#ansible-python-libraries","title":"Ansible Python Libraries","text":"<p>If you want to use Ansible Vault with <code>ndfc-python</code>, install Ansible.</p>"},{"location":"setup/using-ansible-vault/#example","title":"Example","text":"<pre><code>pip install ansible\n</code></pre>"},{"location":"setup/using-ansible-vault/#config-file","title":"Config File","text":"<p>To use these scripts and libraries with Ansible Vault, you'll need to update a common settings file and set the environment variable <code>NDFC_PYTHON_CONFIG</code> to point to it.  For example, if you want your settings to be located in $HOME/ndfc-python-settings.yaml, then set:</p> <pre><code>export NDFC_PYTHON_CONFIG=$HOME/ndfc-python-settings.yaml\n</code></pre> <p>And edit this file to contain:</p> <pre><code>---\nansible_vault: '/path/to/your/ansible/vault/file'\n</code></pre>"},{"location":"setup/using-ansible-vault/#update-your-vault-with-keyvalues-specific-to-ndfc-python","title":"Update your Vault with key/values specific to ndfc-python","text":"<p>Next, you'll need to edit your Ansible Vault file to add your Nexus Dashboard Controller credentials (username, password, and login domain) and ip address.</p> <p>We may also require the username and password for your switches in the future, so you might want to add this as well.</p> <pre><code>/path/to/your/ansible/vault/file \n</code></pre> <p>It is recommended (but not mandatory) that you encrypt all passwords.  Below is one way to do this.</p>"},{"location":"setup/using-ansible-vault/#modify-pathtoyouransiblevaultfile","title":"Modify /path/to/your/ansible/vault/file","text":""},{"location":"setup/using-ansible-vault/#edit-ansible_password-password-for-ndfc-controller-and-device_password-password-for-nx-os-switches","title":"Edit <code>ansible_password</code> (password for NDFC controller) and <code>device_password</code> (password for NX-OS switches)","text":"<p>Add <code>ansible_password</code> and <code>device_password</code> in encrypted format (or non-encrypted, if you don't care about security).  These are the passwords you use to login to your ND/NDFC Controller, and NX-OS switches, respectively.</p> <p>To add encrypted passwords for the ND/NDFC controller and NX-OS devices, issue the following from this repository's top-level directory.</p> <pre><code>ansible-vault encrypt_string 'mySuperSecretNdfcPassword' --name 'ansible_password' &gt;&gt; /path/to/your/ansible/vault/file\necho \"\" &gt;&gt; /path/to/your/ansible/vault/file\nansible-vault encrypt_string 'mySuperSecretNxosPassword' --name 'device_password' &gt;&gt; /path/to/your/ansible/vault/file\necho \"\" &gt;&gt; /path/to/your/ansible/vault/file\n</code></pre> <p>ansible-vault will prompt you for a vault password, which you'll use to decrypt these passwords when running the example scripts.</p> <p>Example:</p> <pre><code>% ansible-vault encrypt_string 'mySuperSecretNdfcPassword' --name 'ansible_password' &gt;&gt; /path/to/your/ansible/vault/file\nNew Vault password: \nConfirm New Vault password: \n%\n% echo \"\" &gt;&gt; /path/to/your/ansible/vault/file\n% cat /path/to/your/ansible/vault/file\nansible_password: !vault |\n          $ANSIBLE_VAULT;1.1;AES256\n          35313565343034623966323832303764633165386439663133323832383336366362663431366565\n          6238373030393562363831616266336464353963393566300a316564663135323263653165393330\n          33353935396462663531323437336366653937326234313866623535313431366534363938633834\n          6563336634653963320a376364323430316134623430636265383561663631343763646465626365\n          36666366333438373537343033393939653830663061623362613439376161626439\n% \n</code></pre> <p>If you don't care about security, you can add a non-encrypted password by editing the file directly. The following are example unencrypted passwords for the ND/NDFC controller and NX-OS devices added to this file:</p> <pre><code>ansible_password: mySuperSecretNdfcPassword\ndevice_password: mySuperSecretNxosPassword\n</code></pre>"},{"location":"setup/using-ansible-vault/#add-the-domain-for-nexus-dashboard-controller-login","title":"Add the domain for Nexus Dashboard Controller login","text":"<p>Change <code>nd_domain</code> in the same file to the domain associated with the above password that you're using on ND/NDFC.  If the \"domain\" field is not displayed when you login to the GUI, then use local, as shown below.</p> <pre><code>nd_domain: local\n</code></pre>"},{"location":"setup/using-ansible-vault/#add-usernames-for-nexus-dashboard-controller-and-switches","title":"Add usernames for Nexus Dashboard Controller and switches","text":"<p>Change <code>ansible_user</code> in the same file to the username associated with the above password that you're using on ND/NDFC.</p> <p>Change <code>device_username</code> in the same file to the username used to login to your NX-OS switches.</p> <p>Example:</p> <pre><code>ansible_user: voldomort\ndevice_username: admin\n</code></pre>"},{"location":"setup/using-ansible-vault/#add-the-ip-address-of-your-nexus-dashboard-controller","title":"Add the ip address of your Nexus Dashboard Controller","text":"<pre><code>ndfc_ip: 192.168.1.1\n</code></pre>"}]}