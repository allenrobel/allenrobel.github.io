{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>ndfc-python contains Python classes and example scripts for interacting with Cisco's Nexus Dashboard Fabric Controller (NDFC) via its REST API.</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#description","title":"Description","text":"<p>ndfc-python contains Python classes and example scripts for interacting with Cisco's Nexus Dashboard Fabric Controller (NDFC) via its REST API.</p>"},{"location":"scripts/","title":"Scripts","text":""},{"location":"scripts/#examplesdevice_infopy","title":"examples/device_info.py","text":""},{"location":"scripts/#description","title":"Description","text":"<p>Returns switch information.</p>"},{"location":"scripts/#usage","title":"Usage","text":"<pre><code>./device_info.py --config config_device_info.yaml\n</code></pre>"},{"location":"scripts/#example-config-file","title":"Example Config File","text":"<pre><code>---\nconfig:\n  switch_ip4: 10.1.1.1\n  fabric_name: MyFabric\n</code></pre>"},{"location":"classes/Log/","title":"Log","text":""},{"location":"classes/Log/#description","title":"Description","text":"<p>Create the base ndfc_python logging object</p>"},{"location":"classes/Log/#see-also","title":"See also","text":"<p>NdfcPythonLogger()</p>"},{"location":"classes/Log/#raises","title":"Raises","text":"<ul> <li> <p>ValueError</p> <ul> <li>An error is encountered reading the logging config file.</li> <li>An error is encountered parsing the logging config file.</li> <li>No formatters are found in the logging config file that are associated with the configured handlers.</li> <li> <p>TypeError</p> </li> <li> <p><code>develop</code> is not a boolean.</p> </li> </ul> </li> </ul>"},{"location":"classes/Log/#methods","title":"Methods","text":"<code>commit()</code> <p>If <code>config</code> is None, disable logging.</p> <p>If <code>config</code> is a JSON file conformant with <code>logging.config.dictConfig</code> read the file and configure the base logger instance from the file's contents.</p>"},{"location":"classes/Log/#properties","title":"Properties","text":"<code>config</code> <p>Override the <code>NDFC_LOGGING_CONFIG</code> environment variable.  Value is an absolute path to a JSON file from which logging config is read.  The JSON file must conform to <code>logging.config.dictConfig</code> from Python's standard library.</p> <p>Type: str()</p> <p>Default: None</p> <p>Raises: None</p> <code>develop</code> <p>Disable or enable exceptions raised by the logging module.</p> <p>Type: bool()</p> <p>Default: False</p> <p>Raises: TypeError if value is not a bool()</p>"},{"location":"classes/Log/#usage","title":"Usage","text":"<p>By default, Log() does the following:</p> <ol> <li>Reads the environment variable <code>NDFC_LOGGING_CONFIG</code> to determine the path    to the logging config file.  If the environment variable is not set, then    logging is disabled.</li> <li>Sets <code>develop</code> to False.  This disables exceptions raised by the logging    module itself.</li> </ol>"},{"location":"classes/Log/#set-environment-variable","title":"Set environment variable","text":"<p>Set the environment variable <code>NDFC_LOGGING_CONFIG</code> to the path of the logging config file.  <code>bash</code> shell is used in the example below.</p> set NDFC_LOGGING_CONFIG<pre><code>export NDFC_LOGGING_CONFIG=\"/path/to/logging_config.json\"\n</code></pre>"},{"location":"classes/Log/#instantiate-log","title":"Instantiate <code>Log()</code>","text":"<p>Instantiate <code>Log()</code> and call <code>commit()</code> on the instance.</p> instantiate Log()<pre><code>import logging\nfrom ndfc_python.log_v2 import Log\n\ntry:\n    logger = Log()\n    logger.commit()\nexcept (TypeError, ValueError) as error:\n    print(f\"Opps! {error}\")\n    # handle error\n</code></pre> <p>At this point, a base/parent logger (<code>ndfc_python</code>) is created.  This loggerr is defined in the example logging config file further below.</p>"},{"location":"classes/Log/#create-a-logger-under-ndfc_python","title":"Create a logger under <code>ndfc_python</code>","text":"Create log instance<pre><code>log = logging.getLogger(\"ndfc_python.myLogger\")\n</code></pre>"},{"location":"classes/Log/#start-logging","title":"Start logging","text":"Start logging<pre><code>log.info(\"Logger created.\")\n</code></pre>"},{"location":"classes/Log/#disable-logging","title":"Disable logging","text":"<p>To disable for all children, unset the environment variable.</p> <pre><code>unset NDFC_LOGGING_CONFIG\n</code></pre>"},{"location":"classes/Log/#enable-exceptions","title":"Enable exceptions","text":"<p>To enable exceptions from the logging module (not recommended, unless needed for development), set <code>develop</code> to True.</p> set log.develop<pre><code>from ndfc_python.log_v2 import Log\ntry:\n    log = Log()\n    log.develop = True\n    log.commit()\nexcept (TypeError, ValueError) as error:\n    # handle error\n</code></pre>"},{"location":"classes/Log/#override-ndfc_logging_config","title":"Override NDFC_LOGGING_CONFIG","text":"<p>To directly set the path to the logging config file, overriding the <code>NDFC_LOGGING_CONFIG</code> environment variable, set the <code>config</code> property prior to calling <code>commit()</code>:</p> Override NDFC_LOGGING_CONFIG<pre><code>from ndfc_python.log_v2 import Log\ntry:\n    log = Log()\n    log.config = \"/path/to/logging_config.json\"\n    log.commit()\nexcept (TypeError, ValueError) as error:\n    # handle error\n</code></pre>"},{"location":"classes/Log/#example-use-in-a-script","title":"Example use in a script","text":"<pre><code>import sys\nfrom ndfc_python.log_v2 import Log\n\ndef main():\n    try:\n        log = Log()\n        log.commit()\n    except (TypeError, ValueError) as error:\n        print(f\"Error setting up the logger: {error}\")\n        sys.exit(1)\n\n    log.info(\"Scipt started\")\n</code></pre>"},{"location":"classes/Log/#example-use-in-a-class","title":"Example use in a class","text":"Example use in a class<pre><code>class MyClass:\n    def __init__(self):\n        self.class_name = self.__class__.__name__\n        self.log = logging.getLogger(f\"ndfc_python.{self.class_name}\")\n    def some_method(self):\n        self.log.debug(\"This is a debug message.\")\n</code></pre>"},{"location":"classes/Log/#logging-config-file","title":"Logging Config File","text":"<p>The logging config file must conform to <code>logging.config.dictConfig</code> from Python's standard library.</p> <p>An example logging config file is shown below.</p> $HOME/repos/ndfc-python/lib/ndfc_python/logging_config.json<pre><code>{\n  \"version\": 1,\n  \"formatters\": {\n    \"standard\": {\n      \"class\": \"logging.Formatter\",\n      \"format\": \"%(asctime)s - %(levelname)s - [%(name)s.%(funcName)s.%(lineno)d] %(message)s\"\n    }\n  },\n  \"handlers\": {\n    \"console\": {\n        \"class\": \"logging.StreamHandler\",\n        \"formatter\": \"standard\",\n        \"stream\"  : \"ext://sys.stdout\"\n      },\n    \"file\": {\n      \"class\": \"logging.handlers.RotatingFileHandler\",\n      \"formatter\": \"standard\",\n      \"filename\": \"/tmp/ndfc-python.log\",\n      \"mode\": \"a\",\n      \"encoding\": \"utf-8\",\n      \"maxBytes\": 50000000,\n      \"backupCount\": 4\n    }\n  },\n  \"loggers\": {\n        \"ndfc_python\": {\n        \"handlers\": [\n            \"console\",\n            \"file\"\n        ],\n        \"level\": \"DEBUG\",\n        \"propagate\": false\n        },\n        \"dcnm\": {\n            \"handlers\": [\n            \"file\"\n            ],\n            \"level\": \"DEBUG\",\n            \"propagate\": false\n        },\n        \"root\": {\n            \"level\": \"INFO\",\n            \"handlers\": [\n            \"file\"\n            ]\n        }\n    }\n}\n</code></pre>"},{"location":"classes/NetworkDelete/","title":"NetworkDelete","text":""},{"location":"classes/NetworkDelete/#description","title":"Description","text":"<p>Delete a network</p>"},{"location":"classes/NetworkDelete/#raises","title":"Raises","text":"<ul> <li> <p><code>ValueError</code></p> <ul> <li><code>rest_send</code> is not set prior to calling <code>commit</code>.</li> <li><code>results</code> is not set prior to calling <code>commit</code>.</li> <li><code>network_name</code> is not set prior to calling <code>commit</code>.</li> <li><code>fabric_name</code> is not set prior to calling <code>commit</code>.</li> <li>Network <code>network_name</code> does not exist in fabric <code>fabric_name</code>.</li> <li>An error occurred when sending the <code>DELETE</code> request to the controller.</li> </ul> </li> </ul>"},{"location":"classes/NetworkDelete/#properties","title":"Properties","text":"<code>fabric_name</code> <p>The name of the fabric containing the network to be deleted.</p> <code>network_name</code> <p>The network to delete.</p>"},{"location":"classes/NetworkDelete/#example-script","title":"Example script","text":"Example Script<pre><code>import argparse\nimport logging\nimport sys\n\n# We are using our local copy of log_v2.py which is modified to allow\n# console logging.  The copy in the DCNM Ansible Collection specifically\n# disallows console logging.\nfrom ndfc_python.ndfc_python_config import NdfcPythonConfig\nfrom ndfc_python.ndfc_python_logger import NdfcPythonLogger\nfrom ndfc_python.ndfc_python_sender import NdfcPythonSender\nfrom ndfc_python.network_delete import NetworkDelete\nfrom ndfc_python.parsers.parser_config import parser_config\nfrom ndfc_python.parsers.parser_controller_domain import parser_controller_domain\nfrom ndfc_python.parsers.parser_controller_ip4 import parser_controller_ip4\nfrom ndfc_python.parsers.parser_controller_password import parser_controller_password\nfrom ndfc_python.parsers.parser_controller_username import parser_controller_username\nfrom ndfc_python.parsers.parser_loglevel import parser_loglevel\nfrom plugins.module_utils.common.response_handler import ResponseHandler\nfrom plugins.module_utils.common.rest_send_v2 import RestSend\nfrom plugins.module_utils.common.results import Results\n\n\ndef setup_parser() -&gt; argparse.Namespace:\n    \"\"\"\n    ### Summary\n\n    Setup script-specific parser\n\n    Returns:\n        argparse.Namespace\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        parents=[\n            parser_config,\n            parser_loglevel,\n            parser_controller_domain,\n            parser_controller_ip4,\n            parser_controller_password,\n            parser_controller_username,\n        ],\n        description=\"DESCRIPTION: Create a vrf.\",\n    )\n    return parser.parse_args()\n\n\nargs = setup_parser()\n\n\nNdfcPythonLogger()\nlog = logging.getLogger(\"ndfc_python.main\")\nlog.setLevel = args.loglevel\n\ntry:\n    ndfc_sender = NdfcPythonSender()\n    ndfc_sender.args = args\n    ndfc_sender.commit()\nexcept ValueError as error:\n    msg = f\"Exiting.  Error detail: {error}\"\n    log.error(msg)\n    sys.exit(1)\n\ntry:\n    ndfc_config = NdfcPythonConfig()\n    ndfc_config.filename = args.config\n    ndfc_config.commit()\n    config = ndfc_config.contents[\"config\"]\nexcept ValueError as error:\n    msg = f\"Exiting: Error detail: {error}\"\n    log.error(msg)\n    sys.exit()\n\nrest_send = RestSend({})\nrest_send.sender = ndfc_sender.sender\nrest_send.response_handler = ResponseHandler()\n\ntry:\n    instance = NetworkDelete()\n    instance.rest_send = rest_send\n    instance.results = Results()\n    instance.fabric_name = config.get(\"fabric_name\")\n    instance.network_name = config.get(\"network_name\")\n    instance.commit()\nexcept ValueError as error:\n    msg = \"Error creating network. \"\n    msg += f\"Error detail: {error}\"\n    log.error(msg)\n</code></pre>"},{"location":"classes/overview/","title":"Classes","text":"<p><code>*</code> indicates that a class has not yet been updated to work with RestSend().</p> Library Description Log Create the base ndfc_python logging object NdfcCredentials Read the caller's Ansible Vault and provides the credentials therein to the other libraries NdfcDeviceInfo <code>*</code> Retrieve information about a switch NdfcDiscover Discover device NdfcPolicy <code>*</code> Create / delete policies NdfcPythonConfig Returns the contents of a YAML file as a dictionary, given a path to the file NdfcPythonLogger Configure logging for <code>ndfc-python</code> scripts NdfcPythonSender Instantiate and configure the Sender() class NdfcReachability <code>*</code> Test switch reachability (from NDFC controller perspective). NetworkCreate Create networks NetworkDelete Delete networks VrfCreate Create VRFs Validations Validation methods used by the other classes (deprecated) YamlReader Read a YAML file and return its contents as a python dict"},{"location":"setup/clone-the-repositories/","title":"Clone the repositories","text":"<p>We'll need to clone two repositories. - ndfc-python - ansible-dcnm</p> <p>It's recommended to clone the repositories side-by-side in the directory where you keep your repositories.  We'll use <code>$HOME/repos</code> in our examples.</p>"},{"location":"setup/clone-the-repositories/#ndfc-python","title":"<code>ndfc-python</code>","text":"<pre><code>cd $HOME/repos\ngit clone https://github.com/allenrobel/ndfc-python.git\n</code></pre>"},{"location":"setup/clone-the-repositories/#ansible-dcnm","title":"<code>ansible-dcnm</code>","text":"<pre><code>cd $HOME/repos\ngit clone https://github.com/CiscoDevNet/ansible-dcnm.git\n</code></pre> <p>Until relative-imports are integrated into the <code>ansible-dcnm</code> repository, you'll need to switch branches.</p> <pre><code>cd $HOME/repos/ansible-dcnm\ngit switch relative-imports\n</code></pre>"},{"location":"setup/enable-logging/","title":"Enable logging","text":"<p>If you want to enable script logging (optional), set the following environment variable.</p> <pre><code>export NDFC_LOGGING_CONFIG=$HOME/repos/ndfc-python/lib/ndfc_python/logging_config.json\n</code></pre> <p>This is a standard Pyton logging configuration file.  There is an example file in this repository at <code>lib/ndfc_python/logging_config.json</code></p>"},{"location":"setup/running-the-example-scripts/","title":"Running the example scripts","text":"<pre><code>export PYTHONPATH=${PYTHONPATH}:/path/to/this/repo/ndfc-python/lib\n# optional - for Ansible Vault\n# export NDFC_PYTHON_CONFIG=/path/to/ndfc-python-settings.yaml\n# optional - to enable logging\n# export NDFC_LOGGING_CONFIG=/path/to/ndfc-python-logging-config.json\n\npy311) ~ % cd $HOME/ndfc-python/examples\n(py311) examples % ./device_info.py --config config_device_info.yaml\n</code></pre>"},{"location":"setup/update-your-pythonpath/","title":"Update your PYTHONPATH","text":"<p>Update your PYTHONPATH to include both <code>ndfc-python</code> and <code>ansible-dcnm</code> repositories.</p> <pre><code>export PYTHONPATH=$PYTHONPATH:$HOME/repos/ndfc-python:$HOME/repos/ansible-dcnm\n</code></pre> <p>With the above in place, imports from the repository will look like the following in your scripts.</p> Example imports<pre><code>from plugins.module_utils.common.rest_send import RestSend\nfrom plugins.module_utils.common.sender_requests import Sender\n</code></pre>"},{"location":"setup/using-ansible-vault/","title":"Using Ansible Vault","text":"<p>ndfc-python can be modified to work with Ansible Vault, per below.</p>"},{"location":"setup/using-ansible-vault/#ansible-python-libraries","title":"Ansible Python Libraries","text":"<p>If you want to use Ansible Vault with <code>ndfc-python</code>, install Ansible.</p>"},{"location":"setup/using-ansible-vault/#example","title":"Example","text":"<pre><code>pip install ansible\n</code></pre>"},{"location":"setup/using-ansible-vault/#config-file","title":"Config File","text":"<p>To use these scripts and libraries with Ansible Vault, you'll need to update a common settings file and set the environment variable <code>NDFC_PYTHON_CONFIG</code> to point to it.  For example, if you want your settings to be located in $HOME/ndfc-python-settings.yaml, then set:</p> <pre><code>export NDFC_PYTHON_CONFIG=$HOME/ndfc-python-settings.yaml\n</code></pre> <p>And edit this file to contain:</p> <pre><code>---\nansible_vault: '/path/to/your/ansible/vault/file'\n</code></pre>"},{"location":"setup/using-ansible-vault/#update-your-vault-with-keyvalues-specific-to-ndfc-python","title":"Update your Vault with key/values specific to ndfc-python","text":"<p>Next, you'll need to edit your Ansible Vault file to add your Nexus Dashboard Controller credentials (username, password, and login domain) and ip address.</p> <p>We may also require the username and password for your switches in the future, so you might want to add this as well.</p> <pre><code>/path/to/your/ansible/vault/file \n</code></pre> <p>It is recommended (but not mandatory) that you encrypt all passwords.  Below is one way to do this.</p>"},{"location":"setup/using-ansible-vault/#modify-pathtoyouransiblevaultfile","title":"Modify /path/to/your/ansible/vault/file","text":""},{"location":"setup/using-ansible-vault/#edit-ansible_password-password-for-ndfc-controller-and-device_password-password-for-nx-os-switches","title":"Edit <code>ansible_password</code> (password for NDFC controller) and <code>device_password</code> (password for NX-OS switches)","text":"<p>Add <code>ansible_password</code> and <code>device_password</code> in encrypted format (or non-encrypted, if you don't care about security).  These are the passwords you use to login to your ND/NDFC Controller, and NX-OS switches, respectively.</p> <p>To add encrypted passwords for the ND/NDFC controller and NX-OS devices, issue the following from this repository's top-level directory.</p> <pre><code>ansible-vault encrypt_string 'mySuperSecretNdfcPassword' --name 'ansible_password' &gt;&gt; /path/to/your/ansible/vault/file\necho \"\" &gt;&gt; /path/to/your/ansible/vault/file\nansible-vault encrypt_string 'mySuperSecretNxosPassword' --name 'device_password' &gt;&gt; /path/to/your/ansible/vault/file\necho \"\" &gt;&gt; /path/to/your/ansible/vault/file\n</code></pre> <p>ansible-vault will prompt you for a vault password, which you'll use to decrypt these passwords when running the example scripts.</p> <p>Example:</p> <pre><code>% ansible-vault encrypt_string 'mySuperSecretNdfcPassword' --name 'ansible_password' &gt;&gt; /path/to/your/ansible/vault/file\nNew Vault password: \nConfirm New Vault password: \n%\n% echo \"\" &gt;&gt; /path/to/your/ansible/vault/file\n% cat /path/to/your/ansible/vault/file\nansible_password: !vault |\n          $ANSIBLE_VAULT;1.1;AES256\n          35313565343034623966323832303764633165386439663133323832383336366362663431366565\n          6238373030393562363831616266336464353963393566300a316564663135323263653165393330\n          33353935396462663531323437336366653937326234313866623535313431366534363938633834\n          6563336634653963320a376364323430316134623430636265383561663631343763646465626365\n          36666366333438373537343033393939653830663061623362613439376161626439\n% \n</code></pre> <p>If you don't care about security, you can add a non-encrypted password by editing the file directly. The following are example unencrypted passwords for the ND/NDFC controller and NX-OS devices added to this file:</p> <pre><code>ansible_password: mySuperSecretNdfcPassword\ndevice_password: mySuperSecretNxosPassword\n</code></pre>"},{"location":"setup/using-ansible-vault/#add-the-domain-for-nexus-dashboard-controller-login","title":"Add the domain for Nexus Dashboard Controller login","text":"<p>Change <code>nd_domain</code> in the same file to the domain associated with the above password that you're using on ND/NDFC.  If the \"domain\" field is not displayed when you login to the GUI, then use local, as shown below.</p> <pre><code>nd_domain: local\n</code></pre>"},{"location":"setup/using-ansible-vault/#add-usernames-for-nexus-dashboard-controller-and-switches","title":"Add usernames for Nexus Dashboard Controller and switches","text":"<p>Change <code>ansible_user</code> in the same file to the username associated with the above password that you're using on ND/NDFC.</p> <p>Change <code>device_username</code> in the same file to the username used to login to your NX-OS switches.</p> <p>Example:</p> <pre><code>ansible_user: voldomort\ndevice_username: admin\n</code></pre>"},{"location":"setup/using-ansible-vault/#add-the-ip-address-of-your-nexus-dashboard-controller","title":"Add the ip address of your Nexus Dashboard Controller","text":"<pre><code>ndfc_ip: 192.168.1.1\n</code></pre>"}]}